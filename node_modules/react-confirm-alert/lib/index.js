'use strict';

exports.__esModule = true;

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports.confirmAlert = confirmAlert;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var ReactConfirmAlert = (function (_Component) {
  _inherits(ReactConfirmAlert, _Component);

  function ReactConfirmAlert() {
    var _this = this;

    _classCallCheck(this, ReactConfirmAlert);

    _Component.apply(this, arguments);

    this.onClickConfirm = function () {
      _this.props.onConfirm();
      _this.close();
    };

    this.onClickCancel = function () {
      _this.props.onCancel();
      _this.close();
    };

    this.close = function () {
      var target = document.getElementById('react-confirm-alert');
      var svg = document.getElementById('react-confirm-alert-firm-svg');
      target.parentNode.removeChild(target);
      svg.parentNode.removeChild(svg);
      var root = document.body.children[0];
      root.classList.remove('react-confirm-alert-blur');
    };
  }

  ReactConfirmAlert.prototype.render = function render() {
    var _props = this.props;
    var title = _props.title;
    var message = _props.message;
    var confirmLabel = _props.confirmLabel;
    var cancelLabel = _props.cancelLabel;
    var children = _props.children;

    return _react2['default'].createElement(
      'div',
      { className: 'react-confirm-alert-overlay' },
      _react2['default'].createElement(
        'div',
        { className: 'react-confirm-alert' },
        _react2['default'].createElement(
          'h1',
          null,
          title
        ),
        _react2['default'].createElement(
          'h3',
          null,
          message
        ),
        children,
        _react2['default'].createElement(
          'div',
          { className: 'react-confirm-alert-button-group' },
          _react2['default'].createElement(
            'button',
            { onClick: this.onClickCancel },
            cancelLabel
          ),
          _react2['default'].createElement(
            'button',
            { onClick: this.onClickConfirm },
            confirmLabel
          )
        )
      )
    );
  };

  _createClass(ReactConfirmAlert, null, [{
    key: 'propTypes',
    value: {
      title: _react.PropTypes.string,
      message: _react.PropTypes.string,
      confirmLabel: _react.PropTypes.string,
      cancelLabel: _react.PropTypes.string,
      onConfirm: _react.PropTypes.func,
      onCancel: _react.PropTypes.func,
      children: _react.PropTypes.node
    },
    enumerable: true
  }, {
    key: 'defaultProps',
    value: {
      title: 'Confirm',
      message: 'Are you sure to do this.',
      confirmLabel: 'Confirm',
      cancelLabel: 'Cancel',
      onConfirm: function onConfirm() {},
      onCancel: function onCancel() {}
    },
    enumerable: true
  }]);

  return ReactConfirmAlert;
})(_react.Component);

exports['default'] = ReactConfirmAlert;

function createSVG() {
  var svgNS = 'http://www.w3.org/2000/svg';
  var feGaussianBlur = document.createElementNS(svgNS, 'feGaussianBlur');
  feGaussianBlur.setAttribute('stdDeviation', '0.7');

  var filter = document.createElementNS(svgNS, 'filter');
  filter.setAttribute('id', 'gaussian-blur');
  filter.appendChild(feGaussianBlur);

  var svgElem = document.createElementNS(svgNS, 'svg');
  svgElem.setAttribute('id', 'react-confirm-alert-firm-svg');
  svgElem.appendChild(filter);

  document.body.appendChild(svgElem);
}

function createElemetReconfirm(properties) {
  document.body.children[0].classList.add('react-confirm-alert-blur');
  var divTarget = document.createElement('div');
  divTarget.id = 'react-confirm-alert';
  document.body.appendChild(divTarget);
  _reactDom.render(_react2['default'].createElement(ReactConfirmAlert, properties), divTarget);
}

function confirmAlert(properties) {
  createSVG();
  createElemetReconfirm(properties);
}